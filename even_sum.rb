# even_sum メソッドの定義
def even_sum(nums)
    nums.select { |num| num.even? }.sum
end

# 解説:
# このメソッドは、整数の配列 `nums` を引数として受け取り、その中の偶数だけの合計を返します。
#
# 1. **`select` メソッド**:
#    `select` は配列の要素を一つずつブロックに渡し、ブロックの結果が真 (`true`) である要素だけを新しい配列として返すメソッドです。
#    このコードでは `{ |num| num.even? }` というブロックを `select` メソッドに渡しています。このブロックは、各要素 `num` が偶数であるかどうかをチェックするものです。
#
# 2. **`even?` メソッド**:
#    整数に対して `even?` メソッドを呼び出すと、その整数が偶数であれば `true` を、そうでなければ `false` を返します。
#    例えば、`2.even?` は `true` を返し、`3.even?` は `false` を返します。
#
# 3. **`sum` メソッド**:
#    `sum` メソッドは、配列の要素の合計を返すメソッドです。
#    このコードでは、`select` メソッドで選び出された偶数だけの配列に対して `sum` メソッドを呼び出しています。この結果、偶数の要素の合計が返されます。
#
# 上記の説明を組み合わせると、`even_sum` メソッドは次のような動作をします。
# 1. `nums` 配列の中から偶数だけを選び出す。
# 2. その偶数だけの配列の要素の合計を計算する。
# 3. その合計値を返す。
#
# 使用例:
# even_sum([1, 2, 3, 4, 5, 6]) #=> 12

# テスト
puts even_sum([1, 2, 3, 4, 5, 6]) # 12
